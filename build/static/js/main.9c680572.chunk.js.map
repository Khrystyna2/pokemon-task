{"version":3,"sources":["helpers/formatPokemonsData.js","API.js","helpers/colorsAndTypes.js","components/PokemonCard.js","components/ButtonLoadMore.js","components/PokemonList.js","components/PokemonDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["formatPokemonsData","pokemonsList","pokemons","map","pokemon","pokemonDetail","id","name","imageSrc","sprites","front_default","height","weight","totalMoves","moves","length","types","stats","_ref","stat","base_stat","push","type","fetchPokemonList","limit","offset","axios","get","concat","then","res","status","data","results","all","url","catch","err","console","error","colorsAndTypes","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","PokemonCard","_ref$pokemon","onSetCurrentPokemon","react_default","a","createElement","className","src","alt","key","onClick","ButtonLoadMore","onLoadMorePokemons","PokemonList","items","components_PokemonCard","components_ButtonLoadMore","PokemonDetail","attack","defense","hp","specialAttack","specialDefense","onHideCard","App","_Component","_getPrototypeOf2","_this$state","_this","Object","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","pokemonItems","currentPokemon","defineProperty","handleLoadMorePokemons","setState","_this$state2","toConsumableArray","setCurrentPokemon","hidePokemonDetail","setFilterBy","e","filterBy","target","value","inherits","createClass","_this2","_this$state3","_this$state4","filterPokemons","filter","some","includes","filterByType","onChange","placeholder","components_PokemonList","components_PokemonDetail","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c680572.chunk.js","sourcesContent":["const formatPokemonsData = pokemonsList => {\n    const pokemons = [];\n\n    pokemonsList && pokemonsList.map(pokemon => {\n\n        const pokemonDetail = {\n            id: pokemon.id,\n            name: pokemon.name,\n            imageSrc: pokemon.sprites.front_default,\n            height: pokemon.height,\n            weight: pokemon.weight,\n            totalMoves: pokemon.moves.length,\n            types: []\n        }\n\n        pokemon.stats.map(({ stat, base_stat }) => pokemonDetail[stat.name] = base_stat)\n        pokemon.types.map(types => pokemonDetail.types.push(types.type.name))\n\n        pokemons.push(pokemonDetail);\n    })\n    return pokemons;\n}\n\nexport default formatPokemonsData;","import axios from 'axios';\nimport formatPokemonsData from './helpers/formatPokemonsData'\n\nconst fetchPokemonList = (limit, offset) => axios.get(`https://pokeapi.co:443/api/v2/pokemon/?limit=${limit}&offset=${offset}`)\n    .then(res => res.status === 200 && res.data.results)\n    .then(data => axios.all(data.map(({ url }) =>\n        axios.get(url).then(res => res.data)))).then(res => formatPokemonsData(res)).catch(err => console.error(err))\n    .catch(err => console.error(err));\n\nexport { fetchPokemonList };\n","const colorsAndTypes = {\n    normal: \"bg-normal\",\n    fighting: \"bg-fighting\",\n    flying: \"bg-flying\",\n    poison: \"bg-poison\",\n    ground: \"bg-ground\",\n    rock: \"bg-rock\",\n    bug: \"bg-bug\",\n    ghost: \"bg-ghost\",\n    steel: \"bg-steel\",\n    fire: \"bg-danger\",\n    water: \"bg-info\",\n    grass: \"bg-grass\",\n    electric: \"bg-electric\",\n    psychic: \"bg-psychic\",\n    ice: \"bg-ice\",\n    dragon: \"bg-dragon\",\n    dark: \"bg-dark\",\n    fairy: \"bg-fairy\",\n    unknown: \"bg-unknown\",\n    shadow: \"bg-shadow\"\n}\n\nexport default colorsAndTypes;\n\n","import React from 'react';\nimport colorsAndTypes from './../helpers/colorsAndTypes';\n\n\nconst PokemonCard = ({ pokemon: { name, imageSrc, types }, onSetCurrentPokemon }) => (\n    <div className=\"col-12 col-sm-6 col-xl-4\">\n        <div className=\"card bg-light border-light mb-3\">\n            <div className=\"card-image\">\n                <img src={imageSrc} alt={name} />\n            </div>\n            <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">{name}</h5>\n                <div className=\"d-flex justify-content-center flex-wrap\">\n                    {types && types.map(name => <span key={name} className={`${colorsAndTypes[name]} btn btn-sm card-tag`}>{name}</span>)}\n                </div>\n                <button className=\"btn btn-primary w-100\" onClick={onSetCurrentPokemon}>Detail</button>\n            </div>\n        </div>\n    </div>\n)\n\n\nexport default PokemonCard;","import React from 'react';\n\nconst ButtonLoadMore = ({ onLoadMorePokemons }) => {\n    return (\n        <button className=\"btn btn-info w-100 my-5\" onClick={onLoadMorePokemons}>load more</button>\n    )\n}\n\nexport default ButtonLoadMore;","import React from 'react';\nimport PokemonCard from './PokemonCard';\nimport ButtonLoadMore from './ButtonLoadMore';\n\nconst PokemonList = ({ items, onLoadMorePokemons, onSetCurrentPokemon }) => {\n    return (\n        <div className=\"col-12 col-md-8 col-xl-9\">\n            <div className=\"row\">\n                {items && items.map(pokemon =>\n                    <PokemonCard key={pokemon.id} pokemon={pokemon} onSetCurrentPokemon={() => onSetCurrentPokemon(pokemon)} />)}\n                <ButtonLoadMore onLoadMorePokemons={onLoadMorePokemons} />\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonList;","import React from 'react';\n\nconst PokemonDetail = ({ pokemon: { name, imageSrc, types, attack, defense, height, hp, 'special-attack': specialAttack, 'special-defense': specialDefense, weight, totalMoves }, onHideCard }) => (\n    <div className=\"col-12 col-md-4 col-xl-3\">\n        <div className=\"card card-detail bg-light border-light mb-3\">\n            <button type=\"button\" className=\"close\" onClick={onHideCard}>\n                <span>&times;</span>\n            </button>\n            <div className=\"card-image\">\n                <img src={imageSrc} alt={name} />\n            </div>\n            <h4 className=\"card-title text-center my-3\">{name}</h4>\n            <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item d-flex justify-content-between\">Type <span className=\"d-flex flex-column\">{types && types.map(name => <span key={name}>{name}</span>)}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Attack<span>{attack}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Defense<span>{defense}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">HP<span>{hp}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Special Attack<span>{specialAttack}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Special Defense<span>{specialDefense}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Height<span>{height}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Weight<span>{weight}</span></li>\n                <li className=\"list-group-item d-flex justify-content-between\">Total Moves<span>{totalMoves}</span></li>\n            </ul>\n        </div>\n    </div>\n)\n\n\nexport default PokemonDetail;","import React, { Component } from 'react';\nimport { fetchPokemonList } from '../API';\n\nimport PokemonList from './PokemonList';\nimport PokemonDetail from './PokemonDetail';\n\nconst filterByType = (filterBy, pokemons) => pokemons.filter(({ types }) => types.some(name => name.includes(filterBy)))\n\nexport class App extends Component {\n\n    state = {\n        pokemonItems: [],\n        currentPokemon: {},\n        limit: 12,\n        offset: 0,\n        currentPokemon: {},\n        pokemonDetail: false,\n        filterBy: ''\n    }\n\n    componentDidMount() {\n        const { limit, offset } = this.state;\n        fetchPokemonList(limit, offset)\n            .then(data => this.setState({ pokemonItems: data, offset: offset + 12 }));\n    }\n\n    handleLoadMorePokemons = () => {\n        this.setState(state => ({ offset: state.offset + 12 }))\n        const { limit, offset } = this.state;\n        fetchPokemonList(limit, offset)\n            .then(data => this.setState(state => ({ pokemonItems: [...state.pokemonItems, ...data] })))\n    }\n\n    setCurrentPokemon = pokemon => this.setState({\n        currentPokemon: pokemon, pokemonDetail: true\n    })\n\n    hidePokemonDetail = () => this.setState({ pokemonDetail: false })\n\n    setFilterBy = e => this.setState({ filterBy: e.target.value })\n\n\n\n    render() {\n        const { pokemonItems, currentPokemon, pokemonDetail, filterBy } = this.state;\n        const filterPokemons = filterByType(filterBy, pokemonItems)\n        return (\n            <div className=\"container\">\n                <h1 className=\"my-5 text-center\">POKEDEX</h1>\n                <input type='text' onChange={this.setFilterBy} className=\"my-3 input-style\" value={filterBy} placeholder=\"Pokemon Type\" />\n                <div className=\"row\">\n                    <PokemonList items={filterPokemons} onLoadMorePokemons={this.handleLoadMorePokemons} onSetCurrentPokemon={this.setCurrentPokemon} />\n                    {pokemonDetail && <PokemonDetail onHideCard={this.hidePokemonDetail} pokemon={currentPokemon} />}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}